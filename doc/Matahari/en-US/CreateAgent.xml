<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Matahari.ent">
%BOOK_ENTITIES;
]>
<chapter id="Matahari-Creating_Agent">
  <title>Creating the Agent</title>
  <para>
    <note>
    <para>
    For remote access we'll want to create a QMF agent and for our
    local access a DBUS agent.
    </para>
    </note>
  </para>
  <section>
    <title>QMF Agent</title>
    <para>
      Creating the QMF agent requires an agent file <application>test-qmf.cpp</application>.
      This file should contain the following code
<programlisting language="C++">
<![CDATA[
// Include header files with base class MatahariAgent
#include <matahari/mh_agent.h>
// Include QMF header generated from schema.xml
#include "qmf/org/matahariproject/QmfPackage.h"

// Include header to library that implements action of the agent
extern "C" {
#include "test.h"
}

// Class for the new agent - inherited from MatahariAgent
class TestAgent : public MatahariAgent
{
private:
    qmf::org::matahariproject::PackageDefinition _package;
public:
    int setup(qmf::AgentSession session);
    gboolean invoke(qmf::AgentSession session, qmf::AgentEvent event,
                    gpointer user_data);
};


int
main(int argc, char **argv)
{
    // Create and run the agent
    TestAgent agent;
    int rc = agent.init(argc, argv, "test");
    if (rc == 0) {
        agent.run();
    }
    return rc;
}

int
TestAgent::setup(qmf::AgentSession session)
{
    _package.configure(session);
    _instance = qmf::Data(_package.data_Test);

    // Set values for the properties
    _instance.setProperty("answer", get_answer());

    _agent_session.addData(_instance);
    return 0;
}

gboolean
TestAgent::invoke(qmf::AgentSession session, qmf::AgentEvent event,
                  gpointer user_data)
{
    if(event.getType() == qmf::AGENT_METHOD) {
        // Method handling
        const std::string& methodName(event.getMethodName());
        if (methodName == "plus") {
            int32_t x, y, sum;
            // Get the input parameters
            x = event.getArguments()["x"].asInt32();
            y = event.getArguments()["y"].asInt32();
            // Call method from the library
            // (:: is here because of conflict with STL)
            sum = ::mh_plus(x, y);
            // Set output parameters
            event.addReturnArgument("result", sum);
        } else {
            // Function is not implemented
            session.raiseException(event, MH_NOT_IMPLEMENTED);
            goto bail;
        }
    }
    // Method call succeeded
    session.methodSuccess(event);
  bail:
    return TRUE;
}
]]>
</programlisting>
    </para>
  </section>
  
  <section>
    <title>DBus Agent</title>
    <para>
      Creating the DBus agent requires a couple of resource files that define
      DBus relevant information. These examples demonstrate policykit and automatic
      activation of the dbus service.
<programlisting language="C">
<![CDATA[
// Some supporting function for DBus agent
#include <matahari/mh_dbus_common.h>

// Include header to library that implements action of the agent
#include "test.h"

// Name of the object on DBus
#define HOST_BUS_NAME "org.matahariproject.Test"
// Path to the object
#define HOST_OBJECT_PATH "/org/matahariproject/Test"

// Every function in your schema must be defined here with following prototype:
// gboolean className_methodName(Matahari *matahari, IN_argument_1,
//                               IN_argument_2, IN_argument_n,
//                               DBusGMethodInvocation *context);
// Return output arguments with dbus_g_method_return(context, OUT_argument_1,
//                                                   OUT_argument_2,
//                                                   OUT_arguemnt_n);
// Or return error with dbus_g_method_return_error(context, error);
// where error is GError
gboolean
Test_plus(Matahari *matahari, int x, int y, DBusGMethodInvocation *context)
{
    dbus_g_method_return(context, plus(x, y));
    return TRUE;
}

// Include autogenerated files AFTER declaration of functions
#include "test-dbus-glue.h"
#include "test-dbus-properties.h"

// This function is executed when property is set to some value
void
matahari_set_property(GObject *object, guint property_id, const GValue *value,
    GParamSpec *pspec)
{
}

// This function is executed when value of some property is requested
void
matahari_get_property(GObject *object, guint property_id, GValue *value,
    GParamSpec *pspec)
{
    switch (property_id)
    {
    case PROP_ANSWER:
        g_value_set_int (value, get_answer());
        break;
    }
}

// This function must be present. It can be used to define types of dictionaries
GType matahari_dict_type(int prop)
{
  g_printerr("Type of property %d is map of unknown types\n", prop);
  return G_TYPE_VALUE;
}

int main(int argc, char *argv[])
{
    g_type_init();
    // Run the agent
    return run_dbus_server(HOST_BUS_NAME, HOST_OBJECT_PATH);
}
]]>
</programlisting>
  </para>
</section>
<section>
  <title>DBus configuration</title>
    <para>
      The next bit of code is DBus configuration <application>org.matahariproject.Test.conf</application>
      which will be installed to <application>/etc/dbus-1/system.d</application>
<programlisting language="XML">
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE busconfig PUBLIC
 "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
<busconfig>
  <!-- Only root can own the service -->
  <policy user="root">
    <allow own="org.matahariproject.Test"/>
  </policy>

  <!-- Allow anyone to invoke methods on the interfaces -->
  <policy context="default">
    <allow send_destination="org.matahariproject.Test"/>
  </policy>
</busconfig>
]]>
</programlisting>

  </para>
</section>
<section>
  <title>Configuration of on demand activation</title>
    <para> 
      Finally, the on demand activation configuration <application>org.matahariproject.Test.service</application>
      which is to be installed in <application>/usr/share/dbus-1/system-services/</application>
<programlisting language="INI Files">
<![CDATA[
[D-BUS Service]
Name=org.matahariproject.Test
Exec=/usr/sbin/matahari-dbus-test
User=root
]]>
</programlisting>
    </para>
  </section>
</chapter>

