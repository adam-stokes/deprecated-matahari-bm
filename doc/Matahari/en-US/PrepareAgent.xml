<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Matahari.ent">
%BOOK_ENTITIES;
]>
<chapter id="Matahari-Prepare_Agent">
  <title>Preparing an Agent</title>
  <section>
    <title>Creating the API</title>
    <para>
    When creating the Agent and its relevant API knowing the directory structure
    will speed up comprehending how all parts fit together.
    <orderedlist>
    <listitem>
      <para>
      All public API routines are kept within <application>matahari/src/include/matahari</application>.
      </para>
    </listitem>
    <listitem>
      <para>
      Each agent is self contained within their own directory. For example, if the agent is named
      <application>Test</application> then the directory would be <application>matahari/src/test</application>
      </para>
    </listitem>
    <listitem>
      <para>
      Within each agent directory will contain the code for Agent initialization and defining
      the QMF schemata.
      </para>
    </listitem>
    </orderedlist>
    </para>
    <section>
      <title>Create the routines that will be publicly accessible</title>
      <para>
       Need good apis. 
      </para>
    </section>
    <section>
      <title>The schema definition</title>
      <para>
        A schema describes the structure of management data. Each agent provides a 
        schema that describes its management model including the object classes, 
        methods, events, etc. that it provides. In the current QMF distribution, the 
        agent's schema is codified in an XML document. In the near future, there will 
        also be ways to programatically create QMF schemata.
        <footnote><para><ulink url="https://cwiki.apache.org/qpid/qpid-management-framework.html\#QpidManagementFramework-Schema">Borrowed from Apache QPID Wiki</ulink></para></footnote>

      </para>
      <para>
        Creating a <application>schema.xml</application> file requires the use of property and method attributes to describe
        the api.
      </para>
      <note>
        <para>
        All agents now contain their own <application>schema.xml</application> file
        which is found within the agents source level directory.
        </para>
      </note>
      <para>
<programlisting language="XML">
<![CDATA[
<schema package="org.matahariproject">
    <class name="Test">
        <property name="uuid" type="sstr" access="RO" desc="Host UUID" index="y" />
        <property name="hostname" type="sstr" access="RO" desc="Hostname" index="y" />

        <method name="plus" desc="Sum of two numbers">
            <arg name="x" dir="I" type="int32" />
            <arg name="y" dir="I" type="int32" />
            <arg name="result" dir="O" type="int32" />
        </method>
    </class>
</schema>
]]>
</programlisting>
      </para>
    </section>
    <section>
      <title>Building with CMake</title>
      <para>
        The build tool of choice is CMake. Setting up our agent to be included into the distribution
should contain a <application>CMakeLists.txt</application> which gives the build process the necessary
instructions.
      </para>
      <para>
<programlisting language="CMake">
<![CDATA[
cmake_minimum_required(VERSION 2.8)

add_library(mtest SHARED test.c) # Create shared library libmtest from source test.c
set_target_properties(mtest PROPERTIES SOVERSION 0.0.1) # Set the version of shared library
target_link_libraries(mtest SOMELIB_LIBRARIES) # Linkage with some external library

# Link to XML definition of your API
set(SCHEMA ${CMAKE_CURRENT_SOURCE_DIR}/schema.xml)

include(FindPkgConfig) # needed for pkg_check_modules

find_package(Matahari REQUIRED) # Find matahari
include(MatahariMacros) # You need to include this to use some macros

# QMF

 # Find QPid and test if QMF2 is present
find_package(QPID REQUIRED)
if(NOT QMF2_FOUND)
    message(FATAL_ERROR "QPid or QMF2 not found")
endif(NOT QMF2_FOUND)

# Schema points to autogenerated QMF sources
set(SCHEMA_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/qmf/org/matahariproject/QmfPackage.cpp)

# Generation of QMF sources
generate_qmf_schemas(${SCHEMA} ${SCHEMA_SOURCES})

# Create QMF agent executable
add_executable(matahari-qmf-testd test-qmf.cpp ${SCHEMA_SOURCES})
# Link required libraries
target_link_libraries(matahari-qmf-testd mtest ${MATAHARI_LIBRARY} ${MATAHARI_QMF_LIBRARY} ${QPIDCOMMON_LIBRARY} ${QMF2_LIBRARY} ${QPIDTYPES_LIBRARY} ${QPIDMESSAGING_LIBRARY})

# DBus

# dbus-glib is required by DBus
pkg_check_modules(dbus-glib REQUIRED dbus-glib-1)
include_directories(${dbus-glib_INCLUDE_DIRS})

# Create DBus interface XML files from schema
generate_dbus_interface(${SCHEMA})

# Create test-dbus-glue.h and test-dbus-properties.h that are used by DBus agent
generate_dbus_headers(test ${CMAKE_CURRENT_BINARY_DIR}/org.matahariproject.Test.xml)

# Search for generated files in current binary dir
include_directories(${CMAKE_CURRENT_BINARY_DIR})

# Create DBus agent executable
add_executable(matahari-dbus-testd test-dbus.c test-dbus-glue.h)
# Link required libraries
target_link_libraries(matahari-dbus-testd mtest ${MATAHARI_LIBRARY} ${MATAHARI_DBUS_LIBRARIES} ${dbus-glib_LIBRARIES})

# Install DBus conf and service files
install(FILES org.matahariproject.Test.conf DESTINATION /etc/dbus-1/system.d)
install(FILES org.matahariproject.Test.service DESTINATION share/dbus-1/system-services)
]]>
</programlisting>
</para>
    </section>
  </section>
</chapter>

