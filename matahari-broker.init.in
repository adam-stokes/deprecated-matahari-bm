#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#
# matahari-broker  Startup script for the Qpid messaging daemon.
#

### BEGIN INIT INFO
# Provides: matahari-broker
# Required-Start: $local_fs
# Required-Stop: $local_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start or stop matahari broker
# Description: Matahari Broker is an AMQP broker. It receives, stores, routes and forwards messages using the AMQP protcol.
### END INIT INFO

# chkconfig: - 85 15
# description: Matahari Broker is an AMQP broker. It receives, stores, routes and forwards messages using the AMQP protcol.
# processname: qpidd

prog=matahari-brokerd
lockfile=@localstatedir@/lock/subsys/matahari-broker
pidfile=@localstatedir@/run/matahari-broker.pid

# Turn off automatic systemd redirects
SYSTEMCTL_SKIP_REDIRECT=1

# Timeout for qpid-route in seconds
TIMEOUT=5

# Source function library.
. @sysconfdir@/rc.d/init.d/functions

if [ -f @sysconfdir@/sysconfig/matahari-broker ] ; then
	. @sysconfdir@/sysconfig/matahari-broker
fi

RETVAL=0

# Enable broker federation
federate() {
    for (( i=0; i<$1; i++ ));
    do
        case ${FEDERATED_BROKERS[$i]} in
            *_matahari-broker._tcp*)
                RESP=`dig SRV ${FEDERATED_BROKERS[$i]} +short| awk '{print $4":"$3}'|sed 's/\.:/:/'`
                array[${#array[*]}]=$RESP
                ;;
            *)
                array[${#array[*]}]="${FEDERATED_BROKERS[$i]}"
                ;;
        esac
    done

    for (( i=0; i<${#array[@]}; i++ ));
    do
       /usr/bin/qpid-route --timeout=$TIMEOUT dynamic add ${array[$i]} \
            localhost:$MATAHARI_PORT amq.direct &> /dev/null

       /usr/bin/qpid-route --timeout=$TIMEOUT dynamic add localhost:$MATAHARI_PORT \
            ${array[$i]} amq.direct &> /dev/null

       /usr/bin/qpid-route --timeout=$TIMEOUT dynamic add ${array[$i]} \
            localhost:$MATAHARI_PORT qmf.default.direct &> /dev/null

       /usr/bin/qpid-route --timeout=$TIMEOUT dynamic add localhost:$MATAHARI_PORT \
            ${array[$i]} qmf.default.direct &> /dev/null

       /usr/bin/qpid-route --timeout=$TIMEOUT dynamic add ${array[$i]} \
            localhost:$MATAHARI_PORT qmf.default.topic &> /dev/null

       /usr/bin/qpid-route --timeout=$TIMEOUT dynamic add localhost:$MATAHARI_PORT \
            ${array[$i]} qmf.default.topic &> /dev/null
    done
}

start() {
	echo -n $"Starting Matahari broker daemon: "
	install -o qpidd -g qpidd -d @localstatedir@/{run,lib}/matahari
	daemon --pidfile $pidfile --check $prog --user qpidd /usr/sbin/$prog --daemon --pid-dir @localstatedir@/run/matahari --data-dir @localstatedir@/lib/matahari $QPIDD_OPTIONS
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && touch $lockfile
	if [ $RETVAL = 0 ]; then
	    touch $pidfile
	    chown qpidd.qpidd $pidfile
            [ -x /sbin/restorecon ] && /sbin/restorecon $pidfile
	    runuser -s /bin/sh qpidd -c "/usr/sbin/$prog --check --pid-dir @localstatedir@/run/matahari $QPIDD_OPTIONS > $pidfile"
	fi

    broker_len=${#FEDERATED_BROKERS[@]}
    if [ $broker_len -gt 0 ]; then
        federate $broker_len
        RETVAL=0
    fi

	return $RETVAL
}

stop() {
	echo -n $"Stopping Matahari broker daemon: "
	killproc -p $pidfile $prog
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && rm -f $lockfile $pidfile
}

reload() {
	echo 1>&2 $"$0: reload not supported"
	exit 3
}

restart() {
	stop
	start
}

# See how we were called.
case "$1" in
  start|stop|restart|reload)
	$1
	;;
  status)
	status -p $pidfile -l $lockfile $prog
	RETVAL=$?
	;;
  force-reload)
	restart
	;;
  try-restart|condrestart)
	[ -e $lockfile ] && restart || :
	;;
  *)
	echo 1>&2 $"Usage: $0 {start|stop|restart|condrestart|status}"
	exit 1
esac

exit $RETVAL
